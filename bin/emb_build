#!/bin/bash
#
##DOC:	perform several tests in development...

function mycli_command_prerequisites {
cat <<__EOF__
bc
kpartx
losetup
shyaml
sha256sum
python2:colorama
python3:colorama
__EOF__
}


function read_without_comments {
	cat $1 | grep -v "^#" | grep -v "^$"
}


function is_argument_valid {
	[ "" == "$1" ] && return 0
	[ "" == "$2" ] && return 0
	local RESULT=$(read_without_comments $1 | grep "^$2$")
	[ "" == "${RESULT}" ] && return 0
	echo ${RESULT}
}


function mycli_command_help {
cd $(dirname $0)/../resources
cat <<__EOF__
${CLI_NAME} ${CLI_ACTION} $(GRAY [-p PROFILE]) $(GRAY [-b BOARD]) $(GRAY [-e ENV])  $(YELLOW PARTS_CONFIG_YAML)

Here are supported PROFILEs: (first one is the default value)
$(read_without_comments ./profiles.conf | awk '{printf "\t- %s\n", $0}')

Here are supported BOARDs:
$(read_without_comments ./boards.conf | awk '{printf "\t- %s\n", $0}')

Here are supported ENVs:
$(read_without_comments ${CLI_RESOURCE_DIR}/envs.conf | awk '{printf "\t- %s\n", $0}')

Here are additional environment variables to change build behaviors:
	IMAGE_URL
		The url to download archive image (e.g. xxx.sqfs.xz) as base image to build.
		When the url is not specified, the ${CLI_ACTION} subcommand shall call
		${TEAM_RESOURCE_DIR}/pick-image with PROFILE/BOARD/ENV to pick up a proper
		archive image as base image to build.
__EOF__
}


function generate_parts_conf {
	${TRANSFORM} yaml2json -s ${CLI_RESOURCE_DIR}/build-template.yaml -o ${TMP0} || return 1
	${TRANSFORM} yaml2json -s ${TEAM_RESOURCE_DIR}/servers.yaml -o ${TMP1} -f -p tic || return 1
	for arg in "$@"; do
		local THIS_CONF=$(mktemp /tmp/XXXXXX)
		${TRANSFORM} yaml2json -s $arg -o ${THIS_CONF}
		if [ "0" != "$?" ]; then
			rm -f ${THIS_CONF}
			cat ${TMP2} | xargs -I{} sh -c "rm -f {}"
			return 2
		else
			echo ${THIS_CONF} >> ${TMP2}
		fi
	done
	${TRANSFORM} jsons -o ${BUILD_PARTS_CONF_JSON} ${TMP0} envs:${TMP1} $(cat ${TMP2} | awk '{printf "configs:%s\n", $0}' | tr '\n' ' ') || return 3
	cat ${BUILD_PARTS_CONF_JSON} | jq .
}


function initiate_build_variables {
	local CURRENT=$(pwd)      ; cd $(dirname $0)
	export TEAM_BIN_DIR=$(pwd); cd ..
	export TEAM_DIR=$(pwd)    ; cd ${CURRENT}
	[ "${CLI_DIR}" == "${TEAM_DIR}" ] && ERR "${CLI_NAME} ${CLI_ACTION} shall be executed in team directory, instead of current ${CLI_DIR}" && return 1

	export TEAM_EXTERNAL_DIR="${TEAM_DIR}/externals"
	export TEAM_RESOURCE_DIR="${TEAM_DIR}/resources"
	export TEAM_DIR_SCRIPT_REV=$(cat ${TEAM_DIR}/.git/refs/heads/master)
	export TEAM_FULLNAME=$(basename ${TEAM_DIR})
	export TEAM_NAME=$(echo ${TEAM_FULLNAME} | tr '-' '\n' | tail -n1)

	local PROFILES_CONF="${TEAM_RESOURCE_DIR}/profiles.conf"
	local BOARDS_CONF="${TEAM_RESOURCE_DIR}/boards.conf"
	local ENVS_CONF="${CLI_RESOURCE_DIR}/envs.conf"

	export BUILD_TEAM_NAME=${TEAM_NAME}
	[ "" == "${BUILD_LOG_YAML}" ]      && export BUILD_LOG_YAML="/tmp/build.yml"
	[ "" == "${BUILD_BOARD_PROFILE}" ] && export BUILD_BOARD_PROFILE=$(read_without_comments ${PROFILES_CONF} | head -n1)
	[ "" == "${BUILD_BOARD_NAME}" ]    && export BUILD_BOARD_NAME=$(read_without_comments ${BOARDS_CONF} | head -n1)
	[ "" == "${BUILD_BOARD_ENV}" ]     && export BUILD_BOARD_ENV=$(read_without_comments ${ENVS_CONF} | head -n1)

	[ "" == "$(is_argument_valid ${PROFILES_CONF} ${BUILD_BOARD_PROFILE})" ] && ERR "no such profile: ${BUILD_BOARD_PROFILE}" && return 1
	[ "" == "$(is_argument_valid ${BOARDS_CONF} ${BUILD_BOARD_NAME})" ]      && ERR "no such board: ${BUILD_BOARD_NAME}" && return 1
	[ "" == "$(is_argument_valid ${ENVS_CONF} ${BUILD_BOARD_ENV})" ]         && ERR "no such env: ${BUILD_BOARD_ENV}" && return 1

	export BUILD_NAME="${BUILD_BOARD_PROFILE}-${BUILD_BOARD_NAME}-${BUILD_BOARD_ENV}-$(date '+%Y%m%d%H%M%S')"
	export CACHE_DIR="/var/lib/${TEAM_FULLNAME}"
	export OUTPUT_DIR="/tmp"
	export BUILD_PARTS_CONF_JSON="${OUTPUT_DIR}/${BUILD_NAME}.json"

	export BUILD_BOARD_IMAGE_URL=${IMAGE_URL}
	if [ "" == "${BUILD_BOARD_IMAGE_URL}" ]; then
		export BUILD_BOARD_IMAGE_URL=$(${TEAM_RESOURCE_DIR}/pick-image ${BUILD_BOARD_PROFILE} ${BUILD_BOARD_NAME} ${BUILD_BOARD_ENV})
		[ "0" != "$?" ] && ERR "cannot find image url for ${BUILD_BOARD_PROFILE}/${BUILD_BOARD_NAME}/${BUILD_BOARD_ENV}" && return 1
		[ "" == "${BUILD_BOARD_IMAGE_URL}" ] && ERR "unexpected empty image url for ${BUILD_BOARD_PROFILE}/${BUILD_BOARD_NAME}/${BUILD_BOARD_ENV}" && return 1
	fi

	INFO "BUILD_LOG_YAML        = ${BUILD_LOG_YAML}"
	INFO "BUILD_BOARD_PROFILE   = ${BUILD_BOARD_PROFILE}"
	INFO "BUILD_BOARD_NAME      = ${BUILD_BOARD_NAME}"
	INFO "BUILD_BOARD_ENV       = ${BUILD_BOARD_ENV}"
	INFO "BUILD_BOARD_IMAGE_URL = ${BUILD_BOARD_IMAGE_URL}"

	export TRANSFORM="${TEAM_EXTERNAL_DIR}/elinux-tools/tools/transform.js"
	local EXIT_CODE="0"
	local TMP0=$(mktemp /tmp/XXXXXX)
	local TMP1=$(mktemp /tmp/XXXXXX)
	local TMP2=$(mktemp /tmp/XXXXXX)
	TMP0=${TMP0} TMP1=${TMP1} TMP2=${TMP2} generate_parts_conf ${REST_ARGS}
	EXIT_CODE=$?
	rm -f ${TMP0} ${TMP1} ${TMP2}
	[ "0" != "${EXIT_CODE}" ] && return ${EXIT_CODE}
	return 0
}


function download_and_build {
	local DOWNLOAD_URL=${BUILD_BOARD_IMAGE_URL}
	local FILENAME=$(basename ${DOWNLOAD_URL})
	local NAME=${FILENAME%.*}
	local DOWNLOAD_FILE="${CACHE_DIR}/${FILENAME}"
	local ARCHIVE_IMAGE_FILE="${CACHE_DIR}/${NAME}"
	local BUILD_DIR="${OUTPUT_DIR}/${BUILD_NAME}"
	local BUILD_IMAGE="${OUTPUT_DIR}/${BUILD_NAME}.sqfs"
	local COMMAND=""
	local EXIT_CODE="0"
	local START_TIME=$(date '+%s')
	local START_TIMESTAMP=$(date)

	mkdir -p ${CACHE_DIR}
	rm -f ${BUILD_LOG_YAML}

	INFO "checking ${DOWNLOAD_FILE} ..."
	if [ ! -f "${DOWNLOAD_FILE}" ]; then
		COMMAND="wget -O ${DOWNLOAD_FILE} ${DOWNLOAD_URL}"
		INFO "$(PURPLE ${COMMAND})" && ${COMMAND}
		[ "0" != "$?" ] && ERR "failed to download ${DOWNLOAD_URL}" && return 1
	fi

	INFO "checking ${ARCHIVE_IMAGE_FILE} ..."
	if [ ! -f "${ARCHIVE_IMAGE_FILE}" ]; then
		RUN_CMD "unxz -k ${DOWNLOAD_FILE}"
		[ "0" != "$?" ] && ERR "failed to uncompress ${DOWNLOAD_FILE}" && return 2
	fi
	[ ! -f "${ARCHIVE_IMAGE_FILE}" ] && ERR "still missing ${DEVICE_IMAGE_FILE}" && return 3

	#
	# Overlay mount.
	#
	${TEAM_BIN_DIR}/${CLI_NAME} overlay mount ${BUILD_DIR} ${ARCHIVE_IMAGE_FILE}; EXIT_CODE=$?
	[ "0" != "${EXIT_CODE}" ] && ERR "failed to mount overlay fs with ${BUILD_IMAGE}" && return 4

	#
	# Apply parts.
	#
	export PARTS_DIRS=${TEAM_DIR}/parts:${CLI_DIR}/parts
	${TEAM_BIN_DIR}/${CLI_NAME} apply_parts ${BUILD_DIR} ${BUILD_PARTS_CONF_JSON}; EXIT_CODE=$?
	unset PARTS_DIRS
	if [ "0" != "${EXIT_CODE}" ]; then
		${TEAM_BIN_DIR}/${CLI_NAME} overlay umount ${BUILD_DIR}
		return 5
	fi

	#
	# Compose archive image from directory.
	#
	${TEAM_BIN_DIR}/${CLI_NAME} ad2ai ${BUILD_DIR} ${BUILD_IMAGE}; EXIT_CODE=$?

	#
	# Overlay umount.
	#
	${TEAM_BIN_DIR}/${CLI_NAME} overlay umount ${BUILD_DIR}

	#
	# Generate build log yaml file.
	#
	local END_TIME=$(date '+%s')
	local END_TIMESTAMP=$(date)
	local DURATION=$(echo "${END_TIME} - ${START_TIME}" | bc)
	START_TIMESTAMP=${START_TIMESTAMP} \
		END_TIMESTAMP=${END_TIMESTAMP} \
		DURATION=${DURATION} \
		BUILD_IMAGE=${BUILD_IMAGE} \
		generate_build_log_yaml
	INFO "build successfully. log here: ${BUILD_LOG_YAML}"
	cat ${BUILD_LOG_YAML} | awk '{printf "\t%s\n", $0}'

	# END.
	return ${EXIT_CODE}
}


function generate_build_log_yaml {
cat <<__EOF__ > ${BUILD_LOG_YAML}
profile: ${BUILD_BOARD_PROFILE}
board: ${BUILD_BOARD_NAME}
env: ${BUILD_BOARD_ENV}
file: ${BUILD_IMAGE}
build:
	start: ${START_TIMESTAMP}
	end: ${END_TIMESTAMP}
	duration: ${DURATION}
__EOF__
}


function parse_arguments {
	while [ $# -ge 1 ]; do
		echo "processing $1"
		case "$1" in
			-l|--log)
				export BUILD_LOG_YAML=$2
				[ "" == "${BUILD_LOG_YAML}" ] && ERR "please specify LOG_YAML for -l/--log option" && return 1
				shift
				;;
			-p|--profile)
				export BUILD_BOARD_PROFILE=$2
				[ "" == "${BUILD_BOARD_PROFILE}" ] && ERR "please specify PROFILE for -p/--profile option" && return 2
				shift
				;;
			-b|--board)
				export BUILD_BOARD_NAME=$2
				[ "" == "${BUILD_BOARD_NAME}" ] && ERR "please specify PROFILE for -b/--board option" && return 3
				shift
				;;
			-e|--env)
				export BUILD_BOARD_ENV=$2
				[ "" == "${BUILD_BOARD_ENV}" ] && ERR "please specify ENVIRONMENT for -e/--env option" && return 4
				shift
				;;
			*)
				export REST_ARGS=$@
				break
				;;
		esac
		shift
	done
}


function mycli_command_entry {
	parse_arguments $@ || exit $?
	initiate_build_variables || exit $?
	download_and_build
}
