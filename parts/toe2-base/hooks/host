#!/bin/bash
#

# Here are variables initiated by load_and_run script:
#
#  - PART_NAME
#  - PART_DIR
#
# Here are variables initiated by apply_parts command,
# stored in ${WORK_DIR}/env.bash
# 
#  - CLI_DIR
#  - ELINUX_TOOLS_DIR
#
#  (Following variables are retrieved from ${ARCHIVE_DIR}/rootfs.yaml)
#  - BOARD_DIST_CODENAME   bone, raspbian, ...
#  - DIST_CODENAME         trusty, jessie, ...
#  - DIST_NAME             ubuntu, debian, ...
#  - KERNEL_ARCHITECTURE   armv7l
#  - KERNEL                linux
#  - KERNEL_VERSION        4.1.17-ti-rt-r47
#
#  (Following variables are retrieved from the config.json passed to apply_parts subcommand, all are optional)
#  - BOARD_NAME            bbgw, bbg, piz, pizw, ...
#  - BOARD_ENV             production, testing, development, ...
#  - BOARD_PROFILE         abc, def, spider, ...
#
#  (Following variables are derived from parent process `emb_apply_parts`)
#  - AD_BUILD_CONF_JSON       = /tmp/xxx.json
#  - AD_BUILD_WORK_ENV_BASH   = /tmp/xxx-20170413223843/partitions/p2/work/apply_parts_20170413223843/env.bash
#  - AD_BUILD_WORK_ENV_JSON   = /tmp/xxx-20170413223843/partitions/p2/work/apply_parts_20170413223843/env.json
#  - AD_BUILD_WORK_PARTS_DIR  = /tmp/xxx-20170413223843/partitions/p2/work/apply_parts_20170413223843/parts
#  - AD_BUILD_WORK_PARTS_FILE = /tmp/xxx-20170413223843/partitions/p2/work/apply_parts_20170413223843/parts.txt
#
#  - AD_BUILD_WORK_DEBIAN_PKG_LIST  = /tmp/xxx-20170413223843/partitions/p2/work/apply_parts_20170413223843/package-debian.txt
#  - AD_BUILD_WORK_PYTHON2_PKG_LIST = /tmp/xxx-20170413223843/partitions/p2/work/apply_parts_20170413223843/package-python2.txt
#  - AD_BUILD_WORK_PYTHON3_PKG_LIST = /tmp/xxx-20170413223843/partitions/p2/work/apply_parts_20170413223843/package-python3.txt
#  
#  - AD_BUILD_WORK_TOPDIR    = /tmp/xxx-20170413223843/partitions/p2/work/apply_parts_20170413223843
#
#  - AD_TOPDIR               = /tmp/xxx-20170413223843
#  - AD_CONF_JSON            = /tmp/xxx-20170413223843/config.json
#  - AD_PARTITION_DIR        = /tmp/xxx-20170413223843/partitions
#  - AD_ROOTFS_DIR           = /tmp/xxx-20170413223843/partitions/p2
#  - AD_ROOTFS_METADATA_FILE = /tmp/xxx-20170413223843/rootfs.yaml
#  - AD_ROOTFS_PARTITION     = p2
#  - AD_ROOTFS_TYPE          = bone
# 


function repartition_archive_directory {
	local AD_CONF_JSON_BAK=$(mktemp /tmp/XXXXXX)
	local OLD_UUID=$(cat ${AD_CONF_JSON} | jq ".partitions.p2.uuid" | sed 's/\"//g')
	cp ${AD_CONF_JSON} ${AD_CONF_JSON_BAK}
	cat ${AD_CONF_JSON_BAK} \
		| jq ".partitions.p1.p_end = \"${TOE2_BASE_P1_END}%\""	\
		| jq ".partitions.p2.p_start = \"$((TOE2_BASE_P1_END+1))%\""	\
		| jq ".partitions.p2.p_end = \"${TOE2_BASE_P2_END}%\""	\
		| jq ".partitions.p2.uuid = \"${TOE2_BASE_P2_UUID}\""	\
		| jq ".partitions.p3 = {}"	\
		| jq ".partitions.p3.type = \"ext4\""	\
		| jq ".partitions.p3.label = \"app\""   \
		| jq ".partitions.p3.uuid = \"${TOE2_BASE_P3_UUID}\""	\
		| jq ".partitions.p3.p_start = \"$((TOE2_BASE_P2_END+1))%\""	\
		| jq ".partitions.p3.p_end = \"${TOE2_BASE_P3_END}%\""	\
		| jq ".partitions.p4 = {}"	\
		| jq ".partitions.p4.type = \"ext4\""	\
		| jq ".partitions.p4.label = \"data\""	\
		| jq ".partitions.p4.uuid = \"${TOE2_BASE_P4_UUID}\""	\
		| jq ".partitions.p4.p_start = \"$((TOE2_BASE_P3_END+1))%\""	\
		| jq ".partitions.p4.p_end = \"100%\""	\
		> ${AD_CONF_JSON}
	INFO "after repartitioning to layout-03:"
	cat ${AD_CONF_JSON} | jq .partitions | awk '{printf "\t%s\n", $0}'
	rm -f ${AD_CONF_JSON_BAK}
	rm -f ${AD_TOPDIR}/config.ls

	case "${BOARD_DIST_CODENAME}" in
		bone)
			sed -i "s/${OLD_UUID}/${TOE2_BASE_P2_UUID}/g" ${AD_PARTITION_DIR}/p1/uEnv.txt
			INFO "update uEnv.txt to use new uuid $(PURPLE ${TOE2_BASE_P2_UUID}):"
			cat ${AD_PARTITION_DIR}/p1/uEnv.txt | awk '{printf "\t%s\n", $0}'
			;;
		*)
			ERR "unsupport BOARD_DIST_CODENAME(${BOARD_DIST_CODENAME}) to modify rootfs' uuid for bootloader"
			return 2
			;;
	esac
	return 0
}


function read_part_variable {
	local NAME=$1
	local PART_UPPERCASE_NAME=$(echo ${PART_NAME} | tr '[a-z]' '[A-Z]' | tr '-' '_')
	local VARIABLE_NAME="${PART_UPPERCASE_NAME}_${NAME}"
	echo ${!VARIABLE_NAME}
}


function compose_file {
	local FUNC_NAME=$1
	local FILE_NAME=$2
	[ "" == "${FUNC_NAME}" ] && ERR "missing FUNC_NAME" && return 1
	[ "" == "${FILE_NAME}" ] && ERR "missing FILE_NAME" && return 2
	local FILE_PATH=$(read_part_variable ${FILE_NAME})
	[ "" == "${FILE_PATH}" ] && ERR "missing FILE_PATH" && return 3
	local FILE_FULLPATH="${AD_ROOTFS_DIR}${FILE_PATH}"
	mkdir -p $(dirname ${FILE_FULLPATH}) || return 4
	generate_file_for_${FUNC_NAME} > ${FILE_FULLPATH} || return 5
	INFO "$(PURPLE ${FUNC_NAME}) ($(GRAY ${FILE_PATH}))" && cat ${FILE_FULLPATH} | awk '{printf "\t%s\n", $0}'
}


function show_rootfs_file {
	INFO "$(PURPLE $1) ($(GRAY ${AD_ROOTFS_DIR}$1))"
	cat ${AD_ROOTFS_DIR}$1 | awk '{printf "\t%s\n", $0}'
}


function load_script_and_run {
	local TYPE=$1; shift
	[ "" == "${TYPE}" ] && ERR "missing TYPE" && return 1
	local NAME=$1; shift
	[ "" == "${NAME}" ] && ERR "missing NAME" && return 2
	local OPTIONAL=$1; shift
	[ "" == "${OPTIONAL}" ] && local OPTIONAL="false"
	[ "true" == "${OPTIONAL}" ] && local NON_EXISTING_ERR="0" || local NON_EXISTING_ERR="3"
	local SCRIPT_FILE="${BASH_SOURCE[0]}.${TYPE}.${NAME}"
	[ ! -f "${SCRIPT_FILE}" ] && ERR "no such file to load: ${SCRIPT_FILE}" && return ${NON_EXISTING_ERR}
	source ${SCRIPT_FILE} || return 4
	local FUNC_NAME="$(basename ${SCRIPT_FILE} | tr '.' '_')_entry"
	fn_exist ${FUNC_NAME} || return 5
	${FUNC_NAME} $@
}


function verify_sha256 {
	local SHA256=$1
	local TARGET=$2
	echo "$(cat ${SHA256} | head -n1 | awk '{print $1}') ${TARGET}" | sha256sum -c > /dev/null 2>&1
}


function download_and_verify {
	local SERVER_URL=$1 ; shift
	local SERVER_PATH=$1; shift
	[ "" == "${SERVER_URL}" ] && ERR "missing SERVER_URL" && return 1
	[ "" == "${SERVER_PATH}" ] && ERR "missing SERVER_PATH" && return 2
	[ "" != "${USERNAME}" ] && [ "" != "${PASSWORD}" ] && local WGET_OPTIONS="--user=${USERNAME} --password=${PASSWORD}"
	local CACHE_DIR="/tmp"
	local TARGET_FILE="${CACHE_DIR}/$(basename ${SERVER_PATH})"
	local CHECKSUM_FILE="${TARGET_FILE}.sha256sum"
	local EXIT_CODE="0"

	# Download checksum file.
	#
	rm -f ${CHECKSUM_FILE}
	wget -q ${WGET_OPTIONS} -O ${CHECKSUM_FILE} ${SERVER_URL}/${SERVER_PATH}.sha256sum; EXIT_CODE=$?
	[ "0" != "${EXIT_CODE}" ] && ERR "failed to download checksum file ${SERVER_URL}/${SERVER_PATH}.sha256sum" && return 10

	# Verify checksum if the target file exists. 
	# When failed, then delete the target file.
	#
	if [ -f "${TARGET_FILE}" ]; then
		verify_sha256 ${CHECKSUM_FILE} ${TARGET_FILE}; EXIT_CODE=$?
		[ "0" != "${EXIT_CODE}" ] && INFO "${TARGET_FILE} mismatch sha256 checksum, force to re-download..." && rm -f ${TARGET_FILE}
	fi

	# Download target file if it doesn't exist.
	#
	if [ ! -f "${TARGET_FILE}" ]; then
		wget ${WGET_OPTIONS} -O ${TARGET_FILE} ${SERVER_URL}/${SERVER_PATH}; EXIT_CODE=$?
		[ "0" != "${EXIT_CODE}" ] && INFO "failed to download ${SERVER_URL}/${SERVER_PATH}" && return 11
	fi

	# Verify checksum.
	#
	verify_sha256 ${CHECKSUM_FILE} ${TARGET_FILE}; EXIT_CODE=$?
	[ "0" != "${EXIT_CODE}" ] && INFO "${TARGET_FILE} mismatch sha256 checksum" && return 12
	
	# Invoke post-process function with the target file's path and rest arguments.
	#
	fn_exist ${CHAIN_FUNC} || return 0
	INFO "chaining function ${CHAIN_FUNC} ${TARGET_FILE} $@" && ${CHAIN_FUNC} ${TARGET_FILE} $@
}


function install_tool_from_tic_0 {
	local TARGET_FILE=$1
	local TARGET_DIR=$2
	INFO "install_tool_from_tic_0: TARGET_FILE => ${TARGET_FILE}"
	INFO "install_tool_from_tic_0: TARGET_DIR => ${TARGET_DIR}"
	run_my_cmd "cp ${TARGET_FILE} ${TARGET_DIR}"
	run_my_cmd "chmod +x ${TARGET_DIR}/$(basename ${TARGET_FILE})"
}


function install_tool_from_tic {
	local NAME=$1
	local DIR=$2
	[ "" == "${NAME}" ] && ERR "missing NAME" && return 1
	[ "" == "${DIR}" ] && DIR=$(read_part_variable YAPPS_TOOLS_BIN)
	local FILE_PATH="/embedded-linux/tools/${NAME}/${KERNEL}-${DIST_NAME}-${DIST_CODENAME}/${KERNEL_ARCHITECTURE}/${NAME}"
	CHAIN_FUNC="install_tool_from_tic_0" \
		download_and_verify \
			${TIC_ARCHIVE_SERVER_URL} \
			${FILE_PATH} \
			${AD_ROOTFS_DIR}${DIR}
}


# Before archive directory is manipulated.
#
function pre_image {
	repartition_archive_directory || return 1
}


# After copying files to root-fs and partition directories.
#	- elinux-common/copy_partitions      , rsync `${PART}/partitions/p[0-9]/*` to `${AD_PARTITION_DIR}/p[0-9]`
#	- elinux-common/copy_rootfs          , rsync `${PART}/rootfs/*` to `${AD_PARTITION_DIR}/${AD_ROOTFS_PARTITION}`
#	- elinux-common/copy_service_files
#	    for s of services
#	        find ${PART_DIR}/assets/services/${s}/*
#	        copy them to ${AD_BUILD_WORK_TOPDIR}/elinux-common/services/${s}
#	        maybe in the future, implement copy-with-template
#
# Before running script inside rootfs with chroot and qemu (guest script).
#
function pre_guest {
	load_script_and_run boards common                  || return 1
	load_script_and_run boards ${BOARD_NAME} true      || return 2
	load_script_and_run profiles common                || return 3
	load_script_and_run profiles ${BOARD_PROFILE} true || return 4
	return 0
}


# After running script inside rootfs with chroot and qemu
# Before cleanup temporary/cache files in archive directory
#
function post_guest {
	return 0
}


# After cleanup temporary/cache files in archive directory
#
function post_image {
	return 0
}

